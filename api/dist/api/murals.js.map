{"version":3,"sources":["../../src/api/murals.js"],"names":["SERVER_ERROR_MESSAGE","id","mergeParams","load","req","callback","mural","findById","err","error","name","list","res","params","find","murals","json","console","log","status","send","create","body","characters","mural_id","generate","is_approved","submitter_name","first","email","submitter_email","title","description","artist_name","artistName","save","savedMural","read","update","muralObj","updateMural","updatedMural","delete","remove","sendStatus","featuredMurals","nearByMurals","recentlyUploadedMurals"],"mappings":"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","file":"murals.js","sourcesContent":["import resource from 'resource-router-middleware';\nimport Murals from '../models/murals';\nimport shortid from 'shortid';\n\nconst SERVER_ERROR_MESSAGE = 'Something Broke';\n\n\n\n/* eslint-disable no-unused-vars */\nexport default () => resource({\n/* eslint-enable no-unused-vars */\n\n  /** Property name to store preloaded entity on `request`. */\n  id: 'mural',\n  mergeParams: true,\n\n  /** For requests with an `id`, you can auto-load the entity.\n   *  Errors terminate the request, success sets `req[id] = data`.\n  */\n  async load(req, id, callback) {\n    let mural;\n\n    try {\n      mural = await Murals.findById(id);\n      const err = mural ? null : 'Not found';\n      callback(err, mural);\n    } catch (err) {\n      // if moongose throws 'CastError'\n      // it passed in didn't meet the formatting requirements\n      const error = err.name === 'CastError' ? 'Not found' : SERVER_ERROR_MESSAGE;\n      callback(error, mural);\n    }\n  },\n\n    /** GET / - List all murals */\n  async list({ params }, res) {\n    try {\n      const murals = await Murals.find();\n      res.json(murals);\n    } catch (err) {\n      console.log(err);\n      res.status(500).send(SERVER_ERROR_MESSAGE);\n    }\n  },\n\n  /** POST / - Create a new entity */\n  async create({ body }, req, res) {\n    // console.log(body)\n    const mural = new Murals(body);\n\n    shortid.characters('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-');\n\n    mural.mural_id = shortid.generate();\n    mural.is_approved =  false;\n    mural.submitter_name.first = body.email;\n    mural.submitter_email = body.email;\n    mural.title = body.title;\n    mural.description = body.description;\n    mural.artist_name = body.artistName;\n    \n    console.log(mural)\n\n    try {\n      const savedMural = await mural.save();\n      res.json(savedMural);\n      // console.log(\"savedMural\")\n    } catch (err) {\n      // console.log(err);\n      res.status(500).send(SERVER_ERROR_MESSAGE);\n    }\n  },\n\n  /** GET /:id - Return a given entity */\n  read({ mural }, res) {\n    res.json(mural);\n  },\n\n  /** PUT /:id - Update a given entity */\n  async update({ mural, body }, res) {\n    const muralObj = mural.updateMural(body);\n    try {\n      const updatedMural = await muralObj.save();\n      res.json(updatedMural);\n    } catch (err) {\n      console.log(err);\n      res.status(500).send(SERVER_ERROR_MESSAGE);\n    }\n  },\n\n  /** DELETE /:id - Delete a given entity */\n  async delete({ mural }, res) {\n    try {\n      await mural.remove();\n      res.sendStatus(204);\n    } catch (err) {\n      console.log(err);\n      res.status(500).send(SERVER_ERROR_MESSAGE);\n    }\n  },\n});\n\nexport const featuredMurals = (req, res) => {\n  res.json([]);\n};\n\nexport const nearByMurals = (req, res) => {\n  res.json([]);\n};\n\nexport const recentlyUploadedMurals = (req, res) => {\n  res.json([]);\n};\n\n"]}