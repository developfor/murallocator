{"version":3,"sources":["../../src/lib/util.js"],"names":["toRes","res","status","err","thing","newThing","send","toObject","json"],"mappings":";;;;;kBAUwBA,K;;AATxB;;;;;;;;;AASe,SAASA,KAAT,CAAeC,GAAf,EAAkC;AAAA,MAAdC,MAAc,uEAAL,GAAK;;AAC/C;AACA,SAAO,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACrB,QAAIC,iBAAJ;;AAEA,QAAIF,GAAJ,EAAS,OAAOF,IAAIC,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqBH,GAArB,CAAP;;AAET,QAAIC,SAAS,OAAOA,MAAMG,QAAb,KAA0B,UAAvC,EAAmD;AACjDF,iBAAWD,MAAMG,QAAN,EAAX;AACD;AACDN,QAAIC,MAAJ,CAAWA,MAAX,EAAmBM,IAAnB,CAAwBH,QAAxB;AACD,GATD;AAUA;AACD","file":"util.js","sourcesContent":["\n/** Creates a callback that proxies node callback style arguments to an Express Response object.\n *  @param {express.Response} res Express HTTP Response\n *  @param {number} [status=200]  Status code to send on success\n *\n *  @example\n *    list(req, res) {\n *    collection.find({}, toRes(res));\n *  }\n */\nexport default function toRes(res, status = 200) {\n  /* eslint-disable consistent-return */\n  return (err, thing) => {\n    let newThing;\n\n    if (err) return res.status(500).send(err);\n\n    if (thing && typeof thing.toObject === 'function') {\n      newThing = thing.toObject();\n    }\n    res.status(status).json(newThing);\n  };\n  /* eslint-enable consistent-return */\n}\n"]}